name: Deploy Proyecto Web

# Se ejecuta cuando haces push a la rama proyecto_final
on:
  push:
    branches: [ proyecto_final ]
  pull_request:
    branches: [ proyecto_final ]

# Permisos para GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Job simple de validación
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Verificar estructura del proyecto
      run: |
        echo "📁 Estructura del proyecto:"
        ls -la
        echo ""
        echo "📄 Archivos HTML encontrados:"
        find . -name "*.html" -not -path "./node_modules/*" || echo "No se encontraron archivos HTML"
        echo ""
        echo "🎨 Archivos CSS encontrados:"
        find . -name "*.css" -not -path "./node_modules/*" || echo "No se encontraron archivos CSS"
        echo ""
        echo "⚡ Archivos JavaScript encontrados:"
        find . -name "*.js" -not -path "./node_modules/*" || echo "No se encontraron archivos JS"
    
    - name: Validar que existe index.html
      run: |
        if [ -f "index.html" ]; then
          echo "✅ index.html encontrado"
        else
          echo "❌ No se encontró index.html"
          exit 1
        fi

  # Job de preparación para deploy
  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Crear directorio de build
      run: mkdir -p ./build
    
    - name: Copiar archivos al directorio build
      run: |
        echo "📦 Copiando archivos..."
        # Copiar todos los archivos HTML
        find . -name "*.html" -not -path "./build/*" -not -path "./node_modules/*" -exec cp {} ./build/ \;
        
        # Copiar archivos CSS (si existen)
        if [ -d "css" ]; then
          cp -r css ./build/
        fi
        find . -name "*.css" -not -path "./build/*" -not -path "./node_modules/*" -not -path "./css/*" -exec cp {} ./build/ \; 2>/dev/null || true
        
        # Copiar archivos JavaScript (si existen)
        if [ -d "js" ]; then
          cp -r js ./build/
        fi
        find . -name "*.js" -not -path "./build/*" -not -path "./node_modules/*" -not -path "./js/*" -exec cp {} ./build/ \; 2>/dev/null || true
        
        # Copiar imágenes y assets
        if [ -d "images" ]; then
          cp -r images ./build/
        fi
        if [ -d "img" ]; then
          cp -r img ./build/
        fi
        if [ -d "assets" ]; then
          cp -r assets ./build/
        fi
        
        # Copiar otros archivos importantes
        if [ -f "favicon.ico" ]; then
          cp favicon.ico ./build/
        fi
        if [ -f "style.css" ]; then
          cp style.css ./build/
        fi
        if [ -f "script.js" ]; then
          cp script.js ./build/
        fi
    
    - name: Mostrar contenido del build
      run: |
        echo "📁 Contenido del directorio build:"
        ls -la ./build/
        echo ""
        echo "📊 Tamaño total del build:"
        du -sh ./build/
    
    - name: Subir artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: ./build/

  # Job de deploy a GitHub Pages
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/proyecto_final'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Descargar artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: ./build
    
    - name: Configurar GitHub Pages
      uses: actions/configure-pages@v4
    
    - name: Subir a GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./build
    
    - name: Deploy a GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Mostrar resultado
      run: |
        echo "🚀 ¡Deploy completado!"
        echo "🌐 URL del sitio: ${{ steps.deployment.outputs.page_url }}"
        echo "✅ El sitio web está disponible en línea"
